#include <iostream>
#include <random>

extern "C"
{
    /**
     *
     * Этот функция используется для вычисления числа π методом Монте-Карло. 
     * Он генерирует случайные точки в квадрате со стороной 1 и проверяет, сколько из этих точек попадает внутрь 
     * четверти круга с радиусом 1. 
     * Таким образом, отношение числа точек внутри круга к общему числу точек дает приближенное значение числа π/4.
     */
    double calculatePi(int iterations)
    {
        int logTreshold = 0; // порог для вывода сообщений

        std::random_device rd; // random_device 
        std::mt19937 gen(rd()); // генератор псевдослучайных чисел mt19937, использующий random_device для инициализации
        std::uniform_real_distribution<> dis(0.0, 1.0); // генерирует случайные числа с плавающей запятой равномерно распределенные в диапазоне от 0.0 до 1.0.

        /**
         * Определяем периодичность вывода состояни прогресса, чтобы не создалось впечатление что все зависло.
         * Если число итераций меньше 100000, то выводить прогресс не будем, все и так отработает быстро.
         * Если больше - будем обновлять прогресс, но не на каждую итерацию, а так что всего было 100 обновлений прогресса.
         * Чтобы определить частоту вывода число итераций мы поделим на 100
         */
        if (iterations > 100000)
        {
            logTreshold = iterations / 100;
        }

        int insideCircle = 0; // Переменная для подсчета точек, попавших внутрь круга

        std::cerr << "Starting calculation..."; // Вывод сообщения о начале вычислений

        for (int i = 0; i < iterations; ++i) // Цикл для проведения итераций
        {
            double x = dis(gen); // Генерация случайной координаты x
            double y = dis(gen); // Генерация случайной координаты y

            if (x * x + y * y <= 1.0) // Проверка, попала ли точка внутрь круга
            {
                insideCircle++; // Если точка внутри круга, увеличиваем счетчик
            }

            if (logTreshold > 0 && i % logTreshold == 0) // Проверка для вывода точек прогресса
            {
                std::cerr << "."; // Вывод символа "." чтобы показать прогресс вычисления
            }
        }

        std::cerr << "done" << std::endl; // Вывод сообщения о завершении работы

        // Возврат приближенного значения числа π, основанного на количестве точек, 
        //  попавших внутрь четверти круга, и общем числе точек
        return 4.0 * insideCircle / iterations;  
    }
}
